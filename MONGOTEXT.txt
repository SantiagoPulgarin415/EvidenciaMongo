/*
const { faker, fakerRO } = require('@faker-js/faker');
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'usuario';
*/

// Genera usuarios con Faker y agrégalos a la base de datos
/*
async function insertUsers(numUsers) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    for (let i = 0; i < numUsers; i++) {
      const usua = {
        id_usuario: faker.number.int({max:2000}),
        nombre: faker.person.firstName(),
        email: faker.internet.email(), 
        //idROl: faker.number.int({max:2000}),  //(["1","2","3",1,1])
        id_rol: faker.helpers.arrayElements(["1","2","3"],1,1),
        contrasena: faker.internet.password(),
        estado: faker.helpers.arrayElements(["Habilitado", "Inhabilitado"], 1,1)
        // Agrega más campos según tus necesidades
      };

      await collection.insertOne(usua);
    }

    console.log(`${numUsers} usuarios agregados exitosamente.`);
  } catch (error) {
    console.error('Error al conectar o insertar usuarios:', error);
  } finally {
    await client.close();
  }
}

// Cantidad de usuarios a generar
const numUsuariosAGenerar = 1;

// Llamada a la función para insertar usuarios
insertUsers(numUsuariosAGenerar);
*/
///////////////////////////////////////////
// COLECCION DE REPUESTOS
/*

const { faker, fakerRO } = require('@faker-js/faker');

const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'repuestos';

async function insertUsers(numRepuestos) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    for (let i = 0; i < numRepuestos; i++) {
      const repuesto = {
        //nombre: faker.person.firstName(),
        //email: faker.internet.email(), 
        //id_rol: faker.helpers.arrayElements(["1","2","3"],1,1),
        id_repuesto: faker.number.int({max:2000}),
        name_repuesto:faker.commerce.productName(),
        cost_repuesto:faker.commerce.price(),
        quantity_repuesto:faker.number.int({min: 1, max: 200}),
        categories: faker.helpers.arrayElements(["Freno","Luz","Llanta","Bujia","Guaya","Cadena"],1,1),
      };

      await collection.insertOne(repuesto);
    }

    console.log(`${numRepuestos} repuestos agregados exitosamente.`);
  } catch (error) {
    console.error('Error al conectar o insertar repuestos:', error);
  } finally {
    await client.close();
  }
}

// Cantidad de usuarios a generar
const numRepuestosAGenerar = 1;

// Llamada a la función para insertar usuarios
insertUsers(numRepuestosAGenerar);

*/
/////////////////////////////////////////////
/// COLECCION DE MECANICO
/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function createMecanicoCollection() {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    // Crear la colección mecanico con índices y validaciones
    await db.createCollection(collectionName, {
      validator: {
        $jsonSchema: {
          bsonType: "object",
          required: ["id_mecanico", "cedula_mecanico", "nombre_mecanico", "telefono_mecanico"],
          properties: {
            id_mecanico: {
              bsonType: "int",
              description: "ID del mecánico"
            },
            cedula_mecanico: {
              bsonType: "string",
              description: "Cédula del mecánico"
            },
            nombre_mecanico: {
              bsonType: "string",
              description: "Nombre del mecánico"
            },
            telefono_mecanico: {
              bsonType: "string",
              description: "Teléfono del mecánico"
            }
          }
        }
      },
      validationLevel: "strict",
      validationAction: "error"
    });

    console.log('Colección "mecanico" creada exitosamente.');
  } catch (error) {
    console.error('Error al conectar o crear la colección "mecanico":', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para crear la colección "mecanico"
createMecanicoCollection();
*/


// INSERT ONE MECANICO 

/*const { MongoClient } = require('mongodb');
const { faker } = require('@faker-js/faker');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function insertMecanico(mecanicoData) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    await collection.insertOne(mecanicoData);

    console.log('Mecánico insertado exitosamente.');
  } catch (error) {
    console.error('Error al conectar o insertar el mecánico:', error);
  } finally {
    await client.close();
  }
}

// Generación de datos ficticios para el mecánico
const mecanico = {
  id_mecanico: faker.number.int({ min: 1, max: 100 }),
  cedula_mecanico: faker.random.number({ min: 1000000, max: 9999999 }).toString(),
  nombre_mecanico: faker.name.findName(),
  telefono_mecanico: faker.phone.phoneNumber()
};

// Llamada a la función para insertar el mecánico
insertMecanico(mecanico);
*/


////// insert many
/*
const { MongoClient } = require('mongodb');
const { faker } = require('@faker-js/faker');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function insertMecanicos(mecanicosData) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    await collection.insertMany(mecanicosData);

    console.log(`${mecanicosData.length} mecánicos insertados exitosamente.`);
  } catch (error) {
    console.error('Error al conectar o insertar los mecánicos:', error);
  } finally {
    await client.close();
  }
}

// Generación de datos ficticios para los mecánicos
const numMecanicos = 5;
const mecanicos = [];

for (let i = 0; i < numMecanicos; i++) {
  const mecanico = {
    id_mecanico: faker.number.int({ min: 1, max: 100 }),
    cedula_mecanico: faker.random.number({ min: 1000000, max: 9999999 }).toString(),
    nombre_mecanico: faker.name.findName(),
    telefono_mecanico: faker.phone.phoneNumber()
  };

  mecanicos.push(mecanico);
}

// Llamada a la función para insertar los mecánicos
insertMecanicos(mecanicos);
*/

///////////////////////////// find 

/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function findMecanicos(query) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const mecanicos = await collection.find(query).toArray();

    console.log('Resultados de la consulta:');
    console.log(mecanicos);
  } catch (error) {
    console.error('Error al conectar o realizar la consulta:', error);
  } finally {
    await client.close();
  }
}

// Consulta para encontrar mecánicos con ID mayor a 50
const query = { id_mecanico: { $gt: 50 } };

// Llamada a la función para realizar la consulta
findMecanicos(query);
*/


///////////////////// find one 
/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function findOneMecanico(query) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const mecanico = await collection.findOne(query);

    console.log('Resultado de la consulta:');
    console.log(mecanico);
  } catch (error) {
    console.error('Error al conectar o realizar la consulta:', error);
  } finally {
    await client.close();
  }
}

// Consulta para encontrar un mecánico por su ID
const query = { id_mecanico: 1 };

// Llamada a la función para realizar la consulta
findOneMecanico(query);


*/


////////////////// updateone
/*

const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function updateMecanico(query, update) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const result = await collection.updateOne(query, update);

    console.log(`Se actualizó ${result.modifiedCount} documento(s)`);
  } catch (error) {
    console.error('Error al conectar o realizar la actualización:', error);
  } finally {
    await client.close();
  }
}

// Consulta para encontrar el mecánico a actualizar
const query = { id_mecanico: 1 };

// Actualización a aplicar en el mecánico
const update = { $set: { telefono_mecanico: "555-1234" } };

// Llamada a la función para realizar la actualización
updateMecanico(query, update);

*/

//// update many 
/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function updateMecanicos(query, update) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const result = await collection.updateMany(query, update);

    console.log(`Se actualizó ${result.modifiedCount} documento(s)`);
  } catch (error) {
    console.error('Error al conectar o realizar la actualización:', error);
  } finally {
    await client.close();
  }
}

// Consulta para encontrar los mecánicos a actualizar
const query = { id_mecanico: { $gte: 50 } };

// Actualización a aplicar en los mecánicos
const update = { $set: { telefono_mecanico: "555-1234" } };

// Llamada a la función para realizar la actualización
updateMecanicos(query, update);

*/

////////////////////// delete one 
/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function deleteMecanico(query) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const result = await collection.deleteOne(query);

    console.log(`Se eliminó ${result.deletedCount} documento`);
  } catch (error) {
    console.error('Error al conectar o realizar la eliminación:', error);
  } finally {
    await client.close();
  }
}

// Consulta para encontrar el mecánico a eliminar
const query = { id_mecanico: 1 };

// Llamada a la función para realizar la eliminación
deleteMecanico(query);

*/


//// delete many 
/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function deleteMecanicos(query) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const result = await collection.deleteMany(query);

    console.log(`Se eliminaron ${result.deletedCount} documentos`);
  } catch (error) {
    console.error('Error al conectar o realizar la eliminación:', error);
  } finally {
    await client.close();
  }
}

// Consulta para encontrar los mecánicos a eliminar
const query = { id_mecanico: { $gte: 50 } };

// Llamada a la función para realizar la eliminación
deleteMecanicos(query);
*/

/////////////// drop colecction
/* 
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';
const collectionName = 'mecanico';

async function dropCollection() {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);

    await db.dropCollection(collectionName);

    console.log(`La colección ${collectionName} ha sido eliminada`);
  } catch (error) {
    console.error('Error al conectar o eliminar la colección:', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para eliminar la colección
dropCollection();
*/

//////////// drop database
/*

const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';

async function dropDatabase() {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);

    await db.dropDatabase();

    console.log(`La base de datos ${dbName} ha sido eliminada`);
  } catch (error) {
    console.error('Error al conectar o eliminar la base de datos:', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para eliminar la base de datos
dropDatabase();

*/

///// $LOOKUP
/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';

async function performLookup() {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);

    const result = await db.collection('mecanico').aggregate([
      {
        $lookup: {
          from: 'repuestos',
          localField: 'id_mecanico',
          foreignField: 'mecanicoId',
          as: 'repuestos_asignados',
        },
      },
    ]).toArray();

    console.log(result);
  } catch (error) {
    console.error('Error al conectar o realizar la operación:', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para realizar la consulta con $lookup
performLookup();
*/

//////////////////////$limit

/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';

async function limitMecanicos(limit) {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection('mecanicos');

    const result = await collection.find().limit(limit).toArray();

    console.log(result);
  } catch (error) {
    console.error('Error al conectar o realizar la operación:', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para realizar la consulta con $limit
const limit = 5; // Número de documentos a limitar
limitMecanicos(limit);
*/

/////////////////////// $SORT 

/*
const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';

async function sortMecanicos() {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection('mecanicos');

    const result = await collection.find().sort({ nombre_mecanico: 1 }).toArray();

    console.log(result);
  } catch (error) {
    console.error('Error al conectar o realizar la operación:', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para realizar la consulta con $sort
sortMecanicos();
*/

///////// $ UNWIND 

/*const { MongoClient } = require('mongodb');

// Configuración de la conexión a la base de datos
const uri = "mongodb+srv://admin:admin@cluster0.obgirdr.mongodb.net/?retryWrites=true&w=majority";
const dbName = 'motorbike';

async function unwindMecanicos() {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    console.log('Conectado exitosamente a MongoDB');

    const db = client.db(dbName);
    const collection = db.collection('mecanicos');

    const result = await collection.aggregate([{ $unwind: '$especialidades' }]).toArray();

    console.log(result);
  } catch (error) {
    console.error('Error al conectar o realizar la operación:', error);
  } finally {
    await client.close();
  }
}

// Llamada a la función para realizar la consulta con $unwind
unwindMecanicos();
*/

